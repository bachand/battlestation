#!/bin/bash

readonly REPO_DIR=$(git rev-parse --show-toplevel)
readonly CONFIG_DIR="$REPO_DIR/config"

#######################################
# Prints the provided message to STDOUT in the default color.
#
# Arguments:
#   Verbose message
#######################################
echo_verbose() {
  printf "%s\n" "$*" >&2;
}

#######################################
# Prints the provided message to STDERR in red.
#
# Arguments:
#   Error message
#######################################
echo_error() {
  printf "$(tput setaf 1)%s$(tput sgr 0)\n" "$*" >&2;
}

#######################################
# Installs HomeBrew if necessary.
#######################################
install_homebrew() {
  if ! type brew >/dev/null 2>&1; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
}

#######################################
# Creates a symlink if it doesn't already exist. Handles permissions, existing files,
# and provides detailed error messages for troubleshooting.
#
# Arguments:
#   Target Path
#   Source Path
#######################################
create_link() {
  local target_path="$1"
  local source_path="$2"
  local target_dir
  
  # Check if source exists
  if [[ ! -f "$source_path" ]]; then
    echo_error "Source file does not exist: $source_path"
    return 1
  fi

  # Get target directory and check if it exists
  target_dir=$(dirname "$target_path")
  if [[ ! -d "$target_dir" ]]; then
    echo_error "Target directory does not exist: $target_dir"
    return 1
  fi

  # Check write permissions on target directory
  if [[ ! -w "$target_dir" ]]; then
    echo_error "No write permission for target directory: $target_dir"
    echo_error "Try running with sudo or ensuring you have write access"
    return 1
  fi

  # Check if target already exists
  if [[ -e "$target_path" || -L "$target_path" ]]; then
    if [[ -L "$target_path" ]]; then
      # It's a symlink, check where it points
      if link_source_path=$(readlink "$target_path"); then
        if [[ "$link_source_path" == "$source_path" ]]; then
          echo_verbose "Symlink already exists and points to correct source: $target_path -> $source_path"
          return 0
        else
          echo_error "Symlink exists but points to different source:"
          echo_error "  Current: $target_path -> $link_source_path"
          echo_error "  Expected: $target_path -> $source_path"
          echo_error "Remove the existing symlink first if you want to replace it"
          return 1
        fi
      else
        echo_error "Failed to read symlink target: $target_path"
        return 1
      fi
    else
      # It's a regular file or directory
      echo_error "Target path exists but is not a symlink: $target_path"
      echo_error "Remove or move the existing file first"
      return 1
    fi
  fi

  # Create the symlink
  if ln -s "$source_path" "$target_path" 2>/dev/null; then
    echo_verbose "Created symlink: $target_path -> $source_path"
  else
    echo_error "Failed to create symlink: $target_path -> $source_path"
    echo_error "Check permissions and ensure the target directory is writable"
    return 1
  fi
}

install_dropbox() {
  echo "todo" > /dev/null
}

# TODO(MB): Things we would have to do if we wanted this be able to be run from a fresh machine:
#   sudo gem install bundle
#   Skitch
#   Adobe Photoshop
#   Setting: enable "Remove items from the Trash after 30 days" from the finder settings.
#   https://www.makeuseof.com/tag/automatically-clean-up-your-mac-os-x-downloads-or-any-folder/ (can this be converted to code?)

install_homebrew

install_dropbox

create_link "$HOME/.zshenv" "$CONFIG_DIR/dotfiles/zshenv"
create_link "$HOME/.zshrc" "$CONFIG_DIR/dotfiles/zshrc"
create_link "$HOME/.gitconfig" "$CONFIG_DIR/dotfiles/gitconfig"
create_link "$HOME/.npmrc" "$CONFIG_DIR/dotfiles/npmrc"
create_link "$HOME/Library/Application Support/Code/User/settings.json" "$CONFIG_DIR/vscode_settings.json"

# TODO: Xcode template - only works on macOS with Xcode installed
# create_link "$HOME/Library/Developer/Xcode/Templates/File Templates/User Templates/Empty Swift File.xctemplate" "$CONFIG_DIR/xcode/Empty Swift File.xctemplate"

chmod 755 "$REPO_DIR/bin/git-cleanup"
create_link '/usr/local/bin/git-cleanup' "$REPO_DIR/bin/git-cleanup"
