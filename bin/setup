#!/bin/bash

readonly REPO_DIR=$(git rev-parse --show-toplevel)
readonly CONFIG_DIR="$REPO_DIR/config"

#######################################
# Prints the provided message to STDOUT in the default color.
#
# Arguments:
#   Verbose message
#######################################
echo_verbose() {
  printf "%s\n" "$*" >&2;
}

#######################################
# Prints the provided message to STDOUT in green.
#
# Arguments:
#   Info message
#######################################
echo_info() {
  printf "$(tput setaf 2)%s$(tput sgr 0)\n" "$*" >&2;
}

#######################################
# Prints the provided message to STDERR in red.
#
# Arguments:
#   Error message
#######################################
echo_error() {
  printf "$(tput setaf 1)%s$(tput sgr 0)\n" "$*" >&2;
}

#######################################
# Installs HomeBrew if necessary.
#######################################
install_homebrew() {
  if ! type brew >/dev/null 2>&1; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

#######################################
# Installs the specified Homebrew package if it isn't installed. If it is, tries to upgrade the
# package.
#
# Arguments:
#   Name of package
#######################################
install_or_upgrade_package() {
  if ! brew list "$1" >/dev/null 2>&1; then
    echo_info "Installing $1 via Homebrew"
    brew install "$1"
  else
    # TODO: find a way to only update if needed to prevent errors in console.
    brew upgrade "$1"
  fi
}

#######################################
# Creates a symlink if it doesn't already exist. If a file already exists at the target path, prints
# an error and does nothing.
#
# Arguments:
#   Target Path
#   Source Path
#######################################
create_link() {
  local target_path="$1"
  local source_path="$2"

  if [[ ! -f "$target_path" ]] && [[ -f "$source_path" ]]; then
    # If the target doesn't exist and the source does, make the link!
    ln -s "$source_path" "$target_path"
  elif [[ -f "$target_path" ]]; then
    if link_source_path=$(readlink "$target_path"); then
      if [[ "$link_source_path" != "$source_path" ]]; then
        echo_error "$target_path exists but is not a link to $source_path"
      fi
    else
      echo_error "$target_path is not a link"
    fi
  elif [[ ! -f "$source_path" ]]; then
    echo_error "$source_path does not exist"
  fi
}

#######################################
# Runs the fzf install script in order to install key bindings and shell completion. Exits with an
# error code of 1 if that script fails.
#######################################
setup_fzf() {
  /usr/local/opt/fzf/install --key-bindings --completion --no-update-rc >/dev/null 2>&1
  if [[ "$?" -ne 0 ]]; then
    echo_error 'Failed to install fzf'
    exit 1
  fi
}

install_gpmdp() {
  # TODO: install https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-
  echo "todo" > /dev/null
}

install_dropbox() {
  echo "todo" > /dev/null
}

# TODO(MB): Things we would have to do if we wanted this be able to be run from a fresh machine:
#   sudo gem install bundle
#   Adobe Photoshop
#   Setting: enable "Remove items from the Trash after 30 days" from the finder settings.
#   https://www.makeuseof.com/tag/automatically-clean-up-your-mac-os-x-downloads-or-any-folder/ (can this be converted to code?)

install_homebrew
# Update Homebrew itself
brew update

install_gpmdp
install_dropbox

packages=( git ag fzf )
for package in "${packages[@]}"
do
  install_or_upgrade_package "$package"
done

setup_fzf

create_link "$HOME/.bashrc" "$CONFIG_DIR/dotfiles/bashrc"
create_link "$HOME/.bash_profile" "$CONFIG_DIR/dotfiles/bash_profile"
create_link "$HOME/.gitconfig" "$CONFIG_DIR/dotfiles/gitconfig"
create_link "$HOME/.npmrc" "$CONFIG_DIR/dotfiles/npmrc"

# TODO: Not working, probably due to spaces. Let's wait until `sync_symlinks` is working.
# create_link "$HOME/Library/Developer/Xcode/Templates/File Templates/User Templates/Empty Swift File.xctemplate" "$REPO_DIR/xcode/Empty Swift File.xctemplate"

chmod 755 "$REPO_DIR/bin/git-cleanup"
create_link '/usr/local/bin/git-cleanup' "$REPO_DIR/bin/git-cleanup"

exit 1
